{"version":3,"file":"xhrconnection.spec.js","sourceRoot":"","sources":["../../test/xhrconnection.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injector} from '@angular/core';\r\nimport {TestBed, getTestBed, inject} from '@angular/core/testing';\r\n\r\nimport { XHRBackend, XHRConnection, XHRBrowser } from '../src/backend/xhr_backend';\r\nimport { Observable } from 'rxjs';\r\n\r\nlet abortSpy: any;\r\nlet sendSpy: any;\r\nlet openSpy: any;\r\n\r\nexport class MockXMLHttpRequest  {\r\n  response: any\r\n  status: number\r\n  constructor() {\r\n    abortSpy = spyOn(this,'abort');\r\n    sendSpy = spyOn(this,'send');\r\n    openSpy = spyOn(this,'open');\r\n  }\r\n  abort() {}\r\n  send () {}\r\n  open() {}\r\n  setResponse(response: any) { this.response = response}\r\n  setStatus(status:number) { this.status = status}\r\n  dispatchEvent(type: string) {\r\n    (this as any)[type]()\r\n  }\r\n}\r\n\r\nexport class MockXHRBrowser extends XHRBrowser {\r\n    mockXMLHttpRequest:MockXMLHttpRequest\r\n    \r\n    build() {\r\n        this.mockXMLHttpRequest = new MockXMLHttpRequest()\r\n        return this.mockXMLHttpRequest\r\n    }\r\n}\r\n\r\ndescribe('XHRConnection', () => {\r\n  it('should be created', () => {\r\n    expect(new XHRConnection({}, new MockXHRBrowser())).toBeTruthy();\r\n  });\r\n  it('`open` should be called', () => {\r\n    const conn = new XHRConnection({}, new MockXHRBrowser())\r\n    conn.response.subscribe()\r\n    expect(openSpy).toHaveBeenCalled()\r\n  });\r\n  it('`send` should be called', () => {\r\n    const conn = new XHRConnection({}, new MockXHRBrowser())\r\n    conn.response.subscribe()\r\n    expect(sendSpy).toHaveBeenCalled()\r\n  });\r\n  it('`response` should be instance of Observable', () => {\r\n      const conn = new XHRConnection({}, new MockXHRBrowser())\r\n      const response = conn.response\r\n    expect(response instanceof Observable).toBeTruthy();\r\n  });\r\n  it('`response` should be `dogs`', () => {\r\n      const mockXHRBrowser = new MockXHRBrowser()\r\n      const conn = new XHRConnection({url: 'dogg'}, mockXHRBrowser)\r\n      conn.response.subscribe(res => {\r\n          expect(res).toBe('dogs')\r\n      })\r\n     mockXHRBrowser.mockXMLHttpRequest.setStatus(200)            \r\n     mockXHRBrowser.mockXMLHttpRequest.setResponse('dogs')            \r\n     mockXHRBrowser.mockXMLHttpRequest.dispatchEvent('onload')\r\n  });\r\n  it('onload listener should exist on subscribe call', () => {\r\n      const mockXHRBrowser = new MockXHRBrowser()\r\n      const conn = new XHRConnection({}, mockXHRBrowser)\r\n      conn.response.subscribe()\r\n     expect((mockXHRBrowser.mockXMLHttpRequest as any)['onload']).toBeTruthy()\r\n  });\r\n});\r\n"]}