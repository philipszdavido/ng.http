{"version":3,"file":"http.spec.js","sourceRoot":"","sources":["../../test/http.spec.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,OAAO,EAAc,MAAM,EAAC,MAAM,uBAAuB,CAAC;AAElE,OAAO,EAAE,IAAI,EAAE,MAAM,UAAU,CAAC;AAChC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AACpE,OAAO,EAAC,cAAc,EAAC,MAAM,sBAAsB,CAAA;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,QAAQ,CAAC,MAAM,EAAE;IACf,UAAU,CAAC;QACT,OAAO,CAAC,sBAAsB,CAAC;YAC7B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,IAAI;oBACb,UAAU,EAAE,UAAC,GAAe;wBAC1B,MAAM,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAA;qBACrB;oBACD,IAAI,EAAC,CAAC,UAAU,CAAC;iBAClB;gBACD,EAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAC;gBAC/C,EAAC,OAAO,EAAC,UAAU,EAAE,UAAU,EAAE,UAAC,CAAY;wBAC5C,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;qBACzB,EAAE,IAAI,EAAC,CAAC,UAAU,CAAC,EAAC;aACtB;SACF,CAAC,CAAC;KACJ,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,UAAC,IAAU;QAChD,MAAM,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC;KAC3B,CAAC,CAAC,CAAC;IACJ,EAAE,CAAC,qCAAqC,EAAE,MAAM,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,UAAC,IAAU,EAAC,IAAe;QAC9F,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,UAAU,CAAC,CAAC,UAAU,EAAE,CAAC;KAC7D,CAAC,CAAC,CAAC;IACJ,EAAE,CAAC,0CAA0C,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,UAAC,IAAU;QACvE,MAAM,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC1C,CAAC,CAAC,CAAC;IACJ,EAAE,CAAC,wCAAwC,EAAE,MAAM,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,UAAC,IAAU,EAAC,IAAe;QACjG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,UAAU,CAAC,CAAC,UAAU,EAAE,CAAC;KACpE,CAAC,CAAC,CAAC;CACL,CAAC,CAAC","sourcesContent":["import {Injector} from '@angular/core';\r\nimport {TestBed, getTestBed, inject} from '@angular/core/testing';\r\n\r\nimport { Http } from './../src';\r\nimport { XHRBackend, XHRBrowser } from '../src/backend/xhr_backend';\r\nimport {MockXHRBrowser} from './xhrconnection.spec'\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\ndescribe('Http', () => {\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      providers: [\r\n        {\r\n          provide: Http,\r\n          useFactory: (xhr: XHRBackend) => {\r\n            return new Http(xhr)\r\n          },\r\n          deps:[XHRBackend]\r\n        },\r\n        {provide: XHRBrowser, useClass: MockXHRBrowser},\r\n        {provide:XHRBackend, useFactory: (x:XHRBrowser)=>{\r\n          return new XHRBackend(x)\r\n        }, deps:[XHRBrowser]}\r\n      ]\r\n    });\r\n  });\r\n\r\n  it('should be created', inject([Http], (http: Http) => {\r\n    expect(http).toBeTruthy();\r\n  }));\r\n  it('request should return an Observable', inject([Http, XHRBrowser], (http: Http,xhrB:XHRBrowser) => {\r\n    expect(http.request({}) instanceof Observable).toBeTruthy();\r\n  }));\r\n  it('checks get method exist on Http instance', inject([Http], (http: Http) => {\r\n    expect(typeof http.get).toBe('function');\r\n  }));\r\n  it('get() call should return an Observable', inject([Http, XHRBrowser], (http: Http,xhrB:XHRBrowser) => {\r\n    expect(http.get('people.json') instanceof Observable).toBeTruthy();\r\n  }));\r\n});\r\n"]}