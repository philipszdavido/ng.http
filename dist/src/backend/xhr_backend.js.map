{"version":3,"file":"xhr_backend.js","sourceRoot":"","sources":["../../../src/backend/xhr_backend.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAA;;;;IAIpC,0BAAK,GAAL;QACI,MAAM,CAAC,IAAI,cAAc,EAAE,CAAA;KAC9B;;gBAJJ,UAAU;;;;qBAJX;;SAKa,UAAU;AAMvB,IAAA;IAEI,uBAAY,cAAmB,EAAE,UAAsB;QACnD,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,CAAC,UAAU,QAAa;YAClD,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;YACtC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC;YAC5D,WAAW,CAAC,MAAM,GAAG;gBAChB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;gBACnC,QAAQ,CAAC,QAAQ,EAAE,CAAA;aACvB,CAAA;YACD,WAAW,CAAC,IAAI,EAAE,CAAA;SACpB,CAAC,CAAA;KACL;wBAvBL;IAwBC,CAAA;AAbD,yBAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCG,oBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;KAAM;IAEhD,qCAAgB,GAAhB,UAAiB,cAAmB;QAChC,MAAM,CAAC,IAAI,aAAa,CAAC,cAAc,EAAC,IAAI,CAAC,UAAU,CAAC,CAAA;KAC3D;;gBANJ,UAAU;;;;gBAlDE,UAAU;;qBALvB;;SAwDa,UAAU","sourcesContent":["import { Observable } from 'rxjs/Observable';\r\nimport { RequestOptions } from '../RequestOptions';\r\nimport {Injectable} from '@angular/core'\r\n\r\n@Injectable()\r\nexport class XHRBrowser {\r\n    build(): any {\r\n        return new XMLHttpRequest()\r\n    }\r\n}\r\n\r\nexport class XHRConnection {\r\n    response: Observable<any>\r\n    constructor(requestOptions: any, browserXHR: XHRBrowser) {\r\n        this.response = new Observable(function (observer: any) { \r\n            let httpRequest = browserXHR.build();\r\n           httpRequest.open(requestOptions.method, requestOptions.url);\r\n           httpRequest.onload = function() {\r\n                observer.next(httpRequest.response)\r\n                observer.complete()\r\n           }\r\n           httpRequest.send()\r\n        })\r\n    }\r\n}\r\n\r\n/*export class XHRConnection {\r\n    response: Observable<any>\r\n    constructor(requestOptions: any, browserXHR: XHRBrowser) {\r\n        this.response = new Observable(function (observer: any) {\r\n\r\n           let httpRequest = browserXHR.build();\r\n           httpRequest.open(requestOptions.method, requestOptions.url);\r\n\r\n           httpRequest.onload = function () {\r\n                if (httpRequest.status == 200) {\r\n                    observer.next(httpRequest.response)\r\n                    observer.complete()\r\n                } else {\r\n                    observer.error(new Error(httpRequest.statusText))                    \r\n                }\r\n           }\r\n\r\n           httpRequest.onerror = function () {\r\n                observer.error(new Error(\"Error: HTTP error\"))               \r\n           }\r\n\r\n           httpRequest.ontimeout = function () {\r\n                observer.error(new Error('Error Timeout'))               \r\n           }\r\n           httpRequest.send()\r\n        })\r\n    }\r\n}\r\n*/\r\n@Injectable()\r\nexport class XHRBackend {\r\n    constructor(private browserXHR: XHRBrowser) {  }\r\n\r\n    createConnection(requestOptions: any /*RequestOptions*/) {\r\n        return new XHRConnection(requestOptions,this.browserXHR)\r\n    }\r\n}\r\n"]}